@page "/items/edit/{Id:int?}"
@using FuelStation.Model.Enums;
@using FuelStation.Shared;
@inject FuelStation.Shared.LoginState loginState;
@inject HttpClient httpClient
@inject NavigationManager navigationManager

@if (loginState.IsLoggedIn == EmployeeType.Manager) {
    <h3>Items</h3>
    @if (item == null) {
        <p>Loading...</p>
    }
    else {
        <EditForm Model="item" OnValidSubmit="OnSave">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="row">
                <div class="col-md-6">
                    <label class="form-label">Code:</label>
                    <InputText class="form-control" @bind-Value="@item.Code" />
                </div>
                <div class=" col-md-6">
                    <label class="form-label">Description:</label>
                    <InputText class="form-control" @bind-Value="@item.Description" />
                </div>
                <div class=" col-md-6">
                    <label class="form-label">Item Type:</label>
                    <InputSelect class="form-control" @bind-Value="item.Type">
                        @foreach (var type in Enum.GetValues<ItemType>()) {
                            <option value="@type">@type</option>
                        }
                    </InputSelect>
                </div>
                <div class=" col-md-6">
                    <label class="form-label">Price:</label>
                    <InputNumber class="form-control" @bind-Value="@item.Price" />
                </div>
                <div class=" col-md-6">
                    <label class="form-label">Cost:</label>
                    <InputNumber class="form-control" @bind-Value="@item.Cost" />
                </div>
            </div>
            <div class="row mt-2">
                <div class="col">
                    <button class="btn btn-success" type="submit">Save</button>
                    <button class="btn btn-danger" @onclick="OnCancel">Cancel</button>
                </div>
            </div>
        </EditForm>
    }
}
else {
    <p>Access Unauthorized!</p>
}

@code {
    [Parameter] public int? Id { get; set; }
    ItemDto item { get; set; }


    protected override async Task OnInitializedAsync() {
        if (Id == null) {
            item = new();
        }
        else {
            item = await httpClient.GetFromJsonAsync<ItemDto>($"api/item/{Id}");
        }

    }

    private void OnCancel() {
        navigationManager.NavigateTo("items");
    }

    private async Task OnSave() {
        HttpResponseMessage? response = null;
        
        if (Id == null) {
            response = await httpClient.PostAsJsonAsync("api/item", item);

        }
        else {
            response = await httpClient.PutAsJsonAsync("api/item", item);

        }
        response.EnsureSuccessStatusCode();
        navigationManager.NavigateTo("items");
    }

}

